buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://repo.spongepowered.org/maven/' }
    mavenCentral()
  }

  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+',        changing: true
    classpath group: 'org.spongepowered',         name: 'mixingradle', version: '0.7-SNAPSHOT'
  }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// This initializes the config. Please try to modify the variables in the config file, if needed, add more if you see a reason to.
ext.config = parseConfig(file('build.properties'))

version = "${config.VERSION}-${config.MINECRAFT_VERSION}"
group = "${config.GROUP}.${config.ARTIFACT}"
archivesBaseName = "${config.ARCHIVES_BASE_NAME}-${config.MINECRAFT_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
  mappings channel: config.MAPPINGS_CHANNEL, version: config.MAPPINGS_VERSION

  //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  runs {
    client {
      workingDirectory project.file('run')
      arg '-mixin.config=infernal-elites-tweaks.mixins.json'
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      mods {
        infernalelitestweaks {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      arg '-mixin.config=infernal-elites-tweaks.mixins.json'
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      mods {
        infernalelitestweaks {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      arg '-mixin.config=infernal-elites-tweaks.mixins.json'
      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      args '--mod', config.MOD_ID, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
      mods {
        infernalelitestweaks {
          source sourceSets.main
        }
      }
    }
  }
}

mixin {
  add sourceSets.main, "infernal-elites-tweaks.refmap.json"
}

// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  maven {
    url 'https://repo.spongepowered.org/maven/'
    content {
      includeGroup 'org.spongepowered'
    }
  }
  
  maven {
    url 'https://maven.infernalstudios.org/releases'  
    content {
      includeGroup 'org.infernalstudios'
    }
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${config.MINECRAFT_VERSION}-${config.FORGE_VERSION}"
  implementation fg.deobf("org.infernalstudios:infernalexp:${config.INFERNALEXPANSION_VERSION}")
  annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

jar {
  manifest {
    attributes([
      'Specification-Title'   : config.TITLE,
      'Specification-Vendor'  : config.AUTHOR,
      'Specification-Version' : '1',
      'Implementation-Title'  : config.TITLE,
      'Implementation-Version': config.VERSION,
      'Implementation-Vendor' : config.AUTHOR,
      'MixinConfigs'          : 'infernal-elites-tweaks.mixins.json'
    ])
  }
}

jar.finalizedBy('reobfJar')


publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = config.GROUP
      artifactId = config.ARTIFACT
      artifact jar

      pom {
        name = config.NAME
        url = config.URL
        licenses {
          license {
            name = config.LICENSE_NAME
            url = config.LICENSE_URL
          }
        }
        scm {
          connection = config.SCM_CONNECTION
          url = config.SCM_URL
        }
      }
    }
  }

  repositories {
    maven {
      url config.MAVEN_URL

      
      credentials {
        username = System.getenv('MAVEN_USER')
        password = System.getenv('MAVEN_TOKEN')
      }
      
      authentication {
        basic(BasicAuthentication)
      }
    }
  }
}


// Config parse function
def parseConfig(File config) {
  config.withReader {
    def prop = new Properties()
    prop.load(it)
    return new ConfigSlurper().parse(prop)
  }
}
